name: Sync Files to Gitee

on:
  schedule:
    # 每30分钟检查一次更新
    - cron: '*/30 * * * *'
  # 可手动触发
  workflow_dispatch:

jobs:
  sync-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        
      - name: Monitor upstream changes
        id: monitor
        run: |
          # 获取最新commit ID和文件修改状态
          API_URL="https://api.github.com/repos/FongMi/Release/commits/master"
          RESPONSE=$(curl -s $API_URL)
          LATEST_COMMIT=$(echo $RESPONSE | jq -r '.sha')
          CHANGED_FILES=$(echo $RESPONSE | jq -r '.files[].filename')
          
          # 检查目标文件是否被修改
          FILE1="apk/release/leanback-armeabi_v7a.apk"
          FILE2="apk/release/mobile-arm64_v8a.apk"
          NEED_UPDATE=false
          
          if [[ "$CHANGED_FILES" =~ "$FILE1" || "$CHANGED_FILES" =~ "$FILE2" ]]; then
            echo "Files changed in commit $LATEST_COMMIT"
            echo "need_update=true" >> $GITHUB_OUTPUT
            echo "new_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "need_update=false" >> $GITHUB_OUTPUT
          fi
          
      # 下载新文件
      - name: Download updated files
        if: steps.monitor.outputs.need_update == 'true'
        run: |
          BASE_URL="https://raw.githubusercontent.com/FongMi/Release/${{ steps.monitor.outputs.new_commit }}"
          
          wget -O leanback.apk "$BASE_URL/apk/release/leanback-armeabi_v7a.apk"
          wget -O mobile.apk "$BASE_URL/apk/release/mobile-arm64_v8a.apk"
          
      # 推送更新到 Gitee
      - name: Push to Gitee
        if: steps.monitor.outputs.need_update == 'true'
        uses: wearerequired/git-mirror-action@master
        env:
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_SSH_KEY }}
        with:
          # 配置目标仓库
          target-repo: "git@gitee.com:your-gitee-username/your-repo.git"
          # 保存到仓库中的路径
          target-path: "apk_releases"
          
      # 添加版本信息文件
      - name: Create version file
        if: steps.monitor.outputs.need_update == 'true'
        run: |
          echo "最新版本: ${{ steps.monitor.outputs.new_commit }}" > version.txt
          echo "更新时间: $(date)" >> version.txt
          
        # 单独推送version文件
      - name: Commit version info
        if: steps.monitor.outputs.need_update == 'true'
        run: |
          git config --global user.name "自动同步机器人"
          git config --global user.email "auto-sync@example.com"
          git add version.txt
          git commit -m "更新版本信息: ${{ steps.monitor.outputs.new_commit }}"
          git push origin main
